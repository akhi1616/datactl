//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	api "github.com/redhat-marketplace/rhmctl/pkg/rhmctl/api"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*DataServiceEndpoint)(nil), (*api.DataServiceEndpoint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(a.(*DataServiceEndpoint), b.(*api.DataServiceEndpoint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*api.DataServiceEndpoint)(nil), (*DataServiceEndpoint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(a.(*api.DataServiceEndpoint), b.(*DataServiceEndpoint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*FileInfo)(nil), (*api.FileInfo)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_FileInfo_To_api_FileInfo(a.(*FileInfo), b.(*api.FileInfo), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*api.FileInfo)(nil), (*FileInfo)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_FileInfo_To_v1_FileInfo(a.(*api.FileInfo), b.(*FileInfo), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GetFileResponse)(nil), (*api.GetFileResponse)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_GetFileResponse_To_api_GetFileResponse(a.(*GetFileResponse), b.(*api.GetFileResponse), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*api.GetFileResponse)(nil), (*GetFileResponse)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_GetFileResponse_To_v1_GetFileResponse(a.(*api.GetFileResponse), b.(*GetFileResponse), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ListFilesResponse)(nil), (*api.ListFilesResponse)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ListFilesResponse_To_api_ListFilesResponse(a.(*ListFilesResponse), b.(*api.ListFilesResponse), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*api.ListFilesResponse)(nil), (*ListFilesResponse)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_ListFilesResponse_To_v1_ListFilesResponse(a.(*api.ListFilesResponse), b.(*ListFilesResponse), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Marketplace)(nil), (*api.Marketplace)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Marketplace_To_api_Marketplace(a.(*Marketplace), b.(*api.Marketplace), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*api.Marketplace)(nil), (*Marketplace)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_Marketplace_To_v1_Marketplace(a.(*api.Marketplace), b.(*Marketplace), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*api.Config)(nil), (*Config)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_Config_To_v1_Config(a.(*api.Config), b.(*Config), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*Config)(nil), (*api.Config)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Config_To_api_Config(a.(*Config), b.(*api.Config), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_Config_To_api_Config(in *Config, out *api.Config, s conversion.Scope) error {
	if err := Convert_v1_Marketplace_To_api_Marketplace(&in.MarketplaceEndpoint, &out.MarketplaceEndpoint, s); err != nil {
		return err
	}
	// WARNING: in.DataServiceEndpoints requires manual conversion: inconvertible types ([]*./v1.DataServiceEndpoint vs map[string]*github.com/redhat-marketplace/rhmctl/pkg/rhmctl/api.DataServiceEndpoint)
	return nil
}

func autoConvert_api_Config_To_v1_Config(in *api.Config, out *Config, s conversion.Scope) error {
	if err := Convert_api_Marketplace_To_v1_Marketplace(&in.MarketplaceEndpoint, &out.MarketplaceEndpoint, s); err != nil {
		return err
	}
	// WARNING: in.DataServiceEndpoints requires manual conversion: inconvertible types (map[string]*github.com/redhat-marketplace/rhmctl/pkg/rhmctl/api.DataServiceEndpoint vs []*./v1.DataServiceEndpoint)
	return nil
}

func autoConvert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(in *DataServiceEndpoint, out *api.DataServiceEndpoint, s conversion.Scope) error {
	out.ClusterContextName = in.ClusterContextName
	out.URL = in.URL
	out.ServiceAccount = in.ServiceAccount
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CertificateAuthority = in.CertificateAuthority
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.CertificateAuthorityData, &out.CertificateAuthorityData, s); err != nil {
		return err
	}
	out.ProxyURL = in.ProxyURL
	return nil
}

// Convert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint is an autogenerated conversion function.
func Convert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(in *DataServiceEndpoint, out *api.DataServiceEndpoint, s conversion.Scope) error {
	return autoConvert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(in, out, s)
}

func autoConvert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(in *api.DataServiceEndpoint, out *DataServiceEndpoint, s conversion.Scope) error {
	out.ClusterContextName = in.ClusterContextName
	out.URL = in.URL
	out.ServiceAccount = in.ServiceAccount
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CertificateAuthority = in.CertificateAuthority
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.CertificateAuthorityData, &out.CertificateAuthorityData, s); err != nil {
		return err
	}
	out.ProxyURL = in.ProxyURL
	return nil
}

// Convert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint is an autogenerated conversion function.
func Convert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(in *api.DataServiceEndpoint, out *DataServiceEndpoint, s conversion.Scope) error {
	return autoConvert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(in, out, s)
}

func autoConvert_v1_FileInfo_To_api_FileInfo(in *FileInfo, out *api.FileInfo, s conversion.Scope) error {
	out.Id = in.Id
	out.Name = in.Name
	out.Size = in.Size
	out.Source = in.Source
	out.SourceType = in.SourceType
	out.Checksum = in.Checksum
	out.MimeType = in.MimeType
	out.CreatedAt = in.CreatedAt
	out.UpdatedAt = in.UpdatedAt
	out.DeletedAt = in.DeletedAt
	out.Metadata = in.Metadata
	return nil
}

// Convert_v1_FileInfo_To_api_FileInfo is an autogenerated conversion function.
func Convert_v1_FileInfo_To_api_FileInfo(in *FileInfo, out *api.FileInfo, s conversion.Scope) error {
	return autoConvert_v1_FileInfo_To_api_FileInfo(in, out, s)
}

func autoConvert_api_FileInfo_To_v1_FileInfo(in *api.FileInfo, out *FileInfo, s conversion.Scope) error {
	out.Id = in.Id
	out.Name = in.Name
	out.Size = in.Size
	out.Source = in.Source
	out.SourceType = in.SourceType
	out.Checksum = in.Checksum
	out.MimeType = in.MimeType
	out.CreatedAt = in.CreatedAt
	out.UpdatedAt = in.UpdatedAt
	out.DeletedAt = in.DeletedAt
	out.Metadata = in.Metadata
	return nil
}

// Convert_api_FileInfo_To_v1_FileInfo is an autogenerated conversion function.
func Convert_api_FileInfo_To_v1_FileInfo(in *api.FileInfo, out *FileInfo, s conversion.Scope) error {
	return autoConvert_api_FileInfo_To_v1_FileInfo(in, out, s)
}

func autoConvert_v1_GetFileResponse_To_api_GetFileResponse(in *GetFileResponse, out *api.GetFileResponse, s conversion.Scope) error {
	if in.Info != nil {
		in, out := &in.Info, &out.Info
		*out = new(api.FileInfo)
		if err := Convert_v1_FileInfo_To_api_FileInfo(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Info = nil
	}
	return nil
}

// Convert_v1_GetFileResponse_To_api_GetFileResponse is an autogenerated conversion function.
func Convert_v1_GetFileResponse_To_api_GetFileResponse(in *GetFileResponse, out *api.GetFileResponse, s conversion.Scope) error {
	return autoConvert_v1_GetFileResponse_To_api_GetFileResponse(in, out, s)
}

func autoConvert_api_GetFileResponse_To_v1_GetFileResponse(in *api.GetFileResponse, out *GetFileResponse, s conversion.Scope) error {
	if in.Info != nil {
		in, out := &in.Info, &out.Info
		*out = new(FileInfo)
		if err := Convert_api_FileInfo_To_v1_FileInfo(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Info = nil
	}
	return nil
}

// Convert_api_GetFileResponse_To_v1_GetFileResponse is an autogenerated conversion function.
func Convert_api_GetFileResponse_To_v1_GetFileResponse(in *api.GetFileResponse, out *GetFileResponse, s conversion.Scope) error {
	return autoConvert_api_GetFileResponse_To_v1_GetFileResponse(in, out, s)
}

func autoConvert_v1_ListFilesResponse_To_api_ListFilesResponse(in *ListFilesResponse, out *api.ListFilesResponse, s conversion.Scope) error {
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make([]*api.FileInfo, len(*in))
		for i := range *in {
			Convert_v1_FileInfo_To_api_FileInfo((*in)[i], (*out)[i], s)
		}
	} else {
		out.Files = nil
	}
	out.NextPageToken = in.NextPageToken
	out.PageSize = in.PageSize
	return nil
}

// Convert_v1_ListFilesResponse_To_api_ListFilesResponse is an autogenerated conversion function.
func Convert_v1_ListFilesResponse_To_api_ListFilesResponse(in *ListFilesResponse, out *api.ListFilesResponse, s conversion.Scope) error {
	return autoConvert_v1_ListFilesResponse_To_api_ListFilesResponse(in, out, s)
}

func autoConvert_api_ListFilesResponse_To_v1_ListFilesResponse(in *api.ListFilesResponse, out *ListFilesResponse, s conversion.Scope) error {
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make([]*FileInfo, len(*in))
		for i := range *in {
			Convert_api_FileInfo_To_v1_FileInfo((*in)[i], (*out)[i], s)
		}
	} else {
		out.Files = nil
	}
	out.NextPageToken = in.NextPageToken
	out.PageSize = in.PageSize
	return nil
}

// Convert_api_ListFilesResponse_To_v1_ListFilesResponse is an autogenerated conversion function.
func Convert_api_ListFilesResponse_To_v1_ListFilesResponse(in *api.ListFilesResponse, out *ListFilesResponse, s conversion.Scope) error {
	return autoConvert_api_ListFilesResponse_To_v1_ListFilesResponse(in, out, s)
}

func autoConvert_v1_Marketplace_To_api_Marketplace(in *Marketplace, out *api.Marketplace, s conversion.Scope) error {
	out.Host = in.Host
	out.PullSecret = in.PullSecret
	out.PullSecretData = in.PullSecretData
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CertificateAuthority = in.CertificateAuthority
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.CertificateAuthorityData, &out.CertificateAuthorityData, s); err != nil {
		return err
	}
	out.ProxyURL = in.ProxyURL
	return nil
}

// Convert_v1_Marketplace_To_api_Marketplace is an autogenerated conversion function.
func Convert_v1_Marketplace_To_api_Marketplace(in *Marketplace, out *api.Marketplace, s conversion.Scope) error {
	return autoConvert_v1_Marketplace_To_api_Marketplace(in, out, s)
}

func autoConvert_api_Marketplace_To_v1_Marketplace(in *api.Marketplace, out *Marketplace, s conversion.Scope) error {
	out.Host = in.Host
	out.PullSecret = in.PullSecret
	out.PullSecretData = in.PullSecretData
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CertificateAuthority = in.CertificateAuthority
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.CertificateAuthorityData, &out.CertificateAuthorityData, s); err != nil {
		return err
	}
	out.ProxyURL = in.ProxyURL
	return nil
}

// Convert_api_Marketplace_To_v1_Marketplace is an autogenerated conversion function.
func Convert_api_Marketplace_To_v1_Marketplace(in *api.Marketplace, out *Marketplace, s conversion.Scope) error {
	return autoConvert_api_Marketplace_To_v1_Marketplace(in, out, s)
}
