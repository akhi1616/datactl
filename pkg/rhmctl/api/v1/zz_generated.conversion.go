// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	api "github.com/redhat-marketplace/rhmctl/pkg/rhmctl/api"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*DataServiceEndpoint)(nil), (*api.DataServiceEndpoint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(a.(*DataServiceEndpoint), b.(*api.DataServiceEndpoint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*api.DataServiceEndpoint)(nil), (*DataServiceEndpoint)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(a.(*api.DataServiceEndpoint), b.(*DataServiceEndpoint), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*api.Config)(nil), (*Config)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_api_Config_To_v1_Config(a.(*api.Config), b.(*Config), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*Config)(nil), (*api.Config)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Config_To_api_Config(a.(*Config), b.(*api.Config), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_Config_To_api_Config(in *Config, out *api.Config, s conversion.Scope) error {
	out.PullSecret = in.PullSecret
	out.PullSecretData = in.PullSecretData
	// WARNING: in.DataServiceEndpoints requires manual conversion: inconvertible types ([]*./v1.DataServiceEndpoint vs map[string]*github.com/redhat-marketplace/rhmctl/pkg/rhmctl/api.DataServiceEndpoint)
	return nil
}

func autoConvert_api_Config_To_v1_Config(in *api.Config, out *Config, s conversion.Scope) error {
	out.PullSecret = in.PullSecret
	out.PullSecretData = in.PullSecretData
	// WARNING: in.DataServiceEndpoints requires manual conversion: inconvertible types (map[string]*github.com/redhat-marketplace/rhmctl/pkg/rhmctl/api.DataServiceEndpoint vs []*./v1.DataServiceEndpoint)
	return nil
}

func autoConvert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(in *DataServiceEndpoint, out *api.DataServiceEndpoint, s conversion.Scope) error {
	out.ClusterContextName = in.ClusterContextName
	out.URL = in.URL
	out.ServiceAccount = in.ServiceAccount
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CertificateAuthority = in.CertificateAuthority
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.CertificateAuthorityData, &out.CertificateAuthorityData, s); err != nil {
		return err
	}
	out.ProxyURL = in.ProxyURL
	return nil
}

// Convert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint is an autogenerated conversion function.
func Convert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(in *DataServiceEndpoint, out *api.DataServiceEndpoint, s conversion.Scope) error {
	return autoConvert_v1_DataServiceEndpoint_To_api_DataServiceEndpoint(in, out, s)
}

func autoConvert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(in *api.DataServiceEndpoint, out *DataServiceEndpoint, s conversion.Scope) error {
	out.ClusterContextName = in.ClusterContextName
	out.URL = in.URL
	out.ServiceAccount = in.ServiceAccount
	out.InsecureSkipTLSVerify = in.InsecureSkipTLSVerify
	out.CertificateAuthority = in.CertificateAuthority
	if err := conversion.Convert_Slice_byte_To_Slice_byte(&in.CertificateAuthorityData, &out.CertificateAuthorityData, s); err != nil {
		return err
	}
	out.ProxyURL = in.ProxyURL
	return nil
}

// Convert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint is an autogenerated conversion function.
func Convert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(in *api.DataServiceEndpoint, out *DataServiceEndpoint, s conversion.Scope) error {
	return autoConvert_api_DataServiceEndpoint_To_v1_DataServiceEndpoint(in, out, s)
}
